\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename simplezip.info
@settitle SimpleZip Documentation
@headings double
@c %**end of header

@c ----------------------------------------------------------------
@set simplezip_version 2.2
@set simplezip_year 2024
@set simplezip_date June @value{simplezip_year}
@set package SimpleZip
@c ----------------------------------------------------------------

@titlepage
@headings off
@title SimpleZip Package
@subtitle Version @value{simplezip_version}
@subtitle @value{simplezip_date}
@author Gray Watson

@page
This manual is licensed by Gray Watson under the Creative Commons Attribution-Share Alike 3.0 License.

Permission is granted to make and distribute verbatim copies of this manual provided this license
notice and this permission notice are preserved on all copies.
@end titlepage

@c ----------------------------------------------------------------

@c In the printed manual, we put the contents at the front.  For the digital manuals it is at the end. 
@iftex
@contents
@end iftex

@c ----------------------------------------------------------------
@node Top, Quick Start, (dir), (dir)
@top SimpleZip
@everyheading @thischapter @| @thispage @| @today{}

Version @value{simplezip_version} -- @value{simplezip_date}

@cindex introduction
@cindex author
@cindex simple zip
This package provides Java classes to read and write Zip files.  There are a number of different libraries that do
this (including one built into the JDK) but I've not found any that gave me precise controls over the Zip internal,
persisted data structures.  This library allows you to control the output of all Zip data and should allow you to
read and write Zip files with full precision.

To get started quickly using SimpleZip, @pxref{Quick Start}.  You can also take a look at the examples section of the
document which has various working code packages. @xref{Examples}.
@ifhtml
There is also a @uref{https://256stuff.com/sources/simplezip/docs/simplezip.pdf, PDF version of this documentation}.
@end ifhtml
@iftex
There is also a @uref{https://256stuff.com/sources/simplezip/docs/simplezip.html, HTML version of this documentation}.
@end iftex
For more information, see the @uref{https://256stuff.com/sources/simplezip/,SimpleZip home page}.

Gray Watson @uref{https://256stuff.com/gray/}

@menu
* Quick Start::                Start using SimpleZip quickly.
* Using::                      How to use SimpleZip.
* Zip File Format ::           Various parts of a Zip file
* Examples::                   Usage examples to help you get started.
* License::                    Open Source license for the project.
* Index of Concepts::          Index of concepts in the manual.
@end menu

@c ----------------------------------------------------------------
@node Quick Start, Using, Top, Top
@chapter Start Using Quickly

@cindex getting started
@cindex how to get started
To use SimpleZip you need to do the following.  For more information, @pxref{Using}.

First download SimpleZip from the @uref{https://256stuff.com/sources/simplezip/releases/, SimpleZip release page}.
@xref{Downloading}.  Or enable via maven.  @xref{Maven}.

To read Zip files, you use the @code{ZipFileInput} class.  Something like the following where @code{input} is a
@code{File} or @code{InputStream}:

@cindex simple examples
@cindex examples, simple
@example
ZipFileInput zipInput = new ZipFileInput(input);
// readFileHeader() will return null when no more files to read
ZipFileHeader header = zipInput.readFileHeader();
// read file data and write to File (can read to buffer or OutputStream)
zipInput.readFileDataToFile(new File(header.getFileName());
// repeat until readFileHeader() returns null
// optionally read all of the directory entries and set permissions
zipInput.readDirectoryFileHeadersAndAssignPermissions();
zipInput.close();
@end example

To write Zip files you use the @code{ZipFileOutput} class.  Something like the following where @code{input} is a
@code{File} or @code{OutputStream}:

@example
ZipFileOutput zipOutput = new ZipFileOutput(output);
// write a file-header to the zip-file
zipOutput.writeFileHeader(
	ZipFileHeader.builder().withFileName("hello.txt").build());
// write file data from File (can write buffer or InputStream)
zipOutput.writeFileData(new File("hello.txt"));
// ... repeat until all headers and file-data written
zipOutput.close();
@end example

For more extensive instructions, @pxref{Using}.

@c ----------------------------------------------------------------
@node Using, Downloading, Quick Start, Top
@chapter Using SimpleZip

@cindex how to use
@cindex using SimpleZip
@menu
* Downloading ::           Downloading the SimpleZip jar.
* Reading ::               Reading Zip Files with ZipFileInput
* Writing ::               Writing Zip Files with ZipFileOutput
* Maven ::                 How to use with Maven.
@end menu

@c ----------------------------------------------------------------
@node Downloading, Reading, Using, Using
@section Downloading Jar

@cindex how to download the jars
@cindex downloading the jars
@cindex where to get new jars
To get started with SimpleZip, you will need to download the jar file.  The
@uref{https://256stuff.com/sources/simplezip/releases/, SimpleZip release page} is the default repository but the jars
are also available from the @uref{https://repo1.maven.org/maven2/com/j256/simplezip/simplezip/,
central maven repository}.

The code works with Java 8 or later.

@c ----------------------------------------------------------------
@node Reading, ZipFileInput, Downloading, Using
@section Reading Zip Files

@cindex read Zip files

@menu
* ZipFileInput ::            Constructing a ZipFileInput.
* Read File Headers ::       Reading file header entries.
* Read File Data ::          Reading file data from buffer, file, or stream
* Read Directory Entries ::  Reading central-directory entries.
@end menu

@c ----------------------------------------------------------------
@node ZipFileInput, Read File Headers, Reading, Reading
@subsection Constructing a ZipFileInput

@cindex ZipFileInput
@cindex read zip files

The main class that reads in Zip files is @code{ZipFileInput}.  You can read in Zip data from a file-path string,
@code{File}, or read it from an @code{InputStream}.

@example
// read a file-path
ZipFileInput zipInput = new ZipFileInput("/tmp/file.zip");
// read a file
ZipFileInput zipInput = new ZipFileInput(new File("/tmp/file.zip"));
// read an InputStream
ZipFileInput zipInput = new ZipFileInput(inputStream);
@end example

@c ----------------------------------------------------------------
@node Read File Headers, Read File Data, ZipFileInput, Reading
@subsection Reading Zip File Header Entries

@cindex ZipFileHeader
@cindex zip file header
@cindex file header

Each file stored in a Zip file is preceded by a header record.  You must first read in the header which contains
the file-name and other metadata.

@example
ZipFileHeader fileHeader = zipInput.readFileHeader();
@end example

The header contains the following information for each file entry:

@itemize @bullet
@item format, version needed to decode
@item general-purpose flags
@item compression method
@item last modified time
@item last modified date
@item crc32 checksum
@item compressed size
@item uncompressed size
@item file-name bytes
@item extra field metadata bytes
@end itemize

The SimpleZip class representing the file-headser is
@uref{https://256stuff.com/sources/simplezip/javadoc/simplezip/com/j256/simplezip/format/ZipFileHeader.html, ZipFileHeader.java}.

If the crc32, compressed size, or uncompressed size fields are 0 then a data-descriptor will be written after the
file-data.  @xref{Data Descriptor}.

Immediately following the file-header is the file-data.  If there are no more files to be read then
@code{readFileHeader()} will return null.

@c ----------------------------------------------------------------
@node Read File Data, Read Directory Entries, Read File Headers, Reading
@subsection Reading File Data to Buffer, File, or Stream

@cindex read zip file data
@cindex zip file data
@cindex read to File
@cindex read to OutputStream

After reading the header, you can then read in the file data.  You can have the @code{ZipFileInput} read
the file-data and write the bytes to a file-path string, @code{File}, or to an @code{OutputStream}.

@example
// read data and write to file output-path, typically from header
zipInput.readFileDataToFile(fileHeader.getFileName());
// or to a file directly
zipInput.readFileDataToFile(new File(fileHeader.getFileName()));
// or to an output stream, such as
ByteArrayOutputStream baos = new ByteArrayOutputStream();
zipInput.readFileData(baos);
@end example

You can also have @code{ZipFileInput} read file data as a series of buffers so you can stream large files.  You should
call @code{readFileDataPart(...)} until it returns EOF (-1).

@example
byte[] buffer = new byte[4096];
while (true) @{
   // can also read at offset and length
   int numRead = zipInput.readFileDataPart(buffer);
   if (numRead < 0) @{ break; @}
   // process bytes in the buffer
@}
@end example

By default you will be reading the decoded (i.e. decompressed) bytes.  You can also read the @emph{raw} bytes, without
conversion, using similar read methods with "raw" in the name.

@example
// read _raw_ file data and write to file output-path
ByteArrayOutputStream baos = new ByteArrayOutputStream();
zipInput.readRawFileData(baos);
@end example

If you would like to stream the file-data out of the Zip file, you can open up an @code{InputStream} on the file-data
either in encoded or raw mode.  Calls to @code{read()} on the @code{InputStream} turn around and call the read methods
on the @code{ZipFileInput}.

@example
// reading from input stream calls thru to zipInput.readFileDataPart()
// or zipInput.readRawFileData() methods
InputStream inputStream =
    zipInput.openFileDataInputStream(false /* not raw */);
@}
@end example

@cindex read zip within zip
@cindex zip within zip, reading
Opening an input-stream allows you to read a Zip file from within another Zip file -- or a jar within a war, etc..

@anchor{Data Descriptor}
@cindex data descriptor

Once all of the data has been read for a particular file, there may be a @code{ZipDataDescriptor} entry written after
the file data.  This entry is read automatically by the @code{ZipFileInput}.  This descriptor is necessary in case the
Zip file does not have the size or checksum/crc information at the start of the Zip file entry.  @xref{File Buffering}.

@example
// return data-descriptor after file-data was read or null if none
ZipDataDescriptor dataDesc = zipInput.getCurrentDataDescriptor();
@end example

The descriptor holds the following information and is represented in SimpleZip by the class
@uref{https://256stuff.com/sources/simplezip/javadoc/simplezip/com/j256/simplezip/format/ZipDataDescriptor.html, ZipDataDescriptor.java}.

@itemize @bullet
@item crc32 checksum
@item compressed size
@item uncompressed size
@end itemize

Once all of the data has been read for a particular file and the optional descriptor has been read, you can then read
the next header.  @xref{Read File Headers}. 

@c ----------------------------------------------------------------
@node Read Directory Entries, Writing, Read File Headers, Reading
@subsection Reading Zip Central-Directory Entries

@cindex central-directory entries, reading

After all of the file headers and data in the Zip data, there are a series of central-directory entries written at the
end of the Zip file which record extra information about each of the files and also provide the locations of the
file-headers and data inside of the Zip file.  You can read these entries if you would like.

@example
// return next central-directory entry or null if none
ZipCentralDirectoryFileEntry directoryEntry =
    zipInput.readDirectoryFileEntry();
@end example

The central-directory file entries hold the following information for each file in the Zip.  Some of the fields are
duplicates of the fields in the file-header.  The entries are represented by the class
@uref{https://256stuff.com/sources/simplezip/javadoc/simplezip/com/j256/simplezip/format/ZipCentralDirectoryFileEntry.html, ZipCentralDirectoryFileEntry.java}.

@cindex external file attributes
@cindex internal file attributes
@cindex file attributes, external
@cindex file attributes, internal

@itemize @bullet
@item format, version that wrote the entry
@item format, version needed to decode
@item general-purpose flags
@item compression method
@item last modified time
@item last modified date
@item crc32 checksum
@item compressed size
@item uncompressed size
@item disk number start
@item internal file attributes
@item external file attributes
@item relative offset of local header
@item file-name bytes
@item extra field metadata bytes
@item comment bytes
@end itemize

If you have been reading file data directly out to disk using the @code{zipInput.readFileData(File)} method, you can
modify the permissions on the file from the file-entry's using something like the following.

@example
// read in a directory entry
directoryEntry = zipInput.readDirectoryFileEntry();
// assign file permissions according to previous entry
zipInput.assignDirectoryFileEntryPermissions(directoryEntry);
@end example

@cindex central-directory end, reading
@cindex zip data end, reading

Once the @code{zipInput.readDirectoryFileHeader()} returns null then you are at the very end of the zip-file where 
there is some end information that can be read.

@example
// read the end of entry of the zip-file
CentralDirectoryEnd directoryEnd = zipInput.readDirectoryEnd();
@end example

The end entry holds the following information.

@itemize @bullet
@item disk number
@item disk number start
@item num records on disk
@item num records total
@item directory size
@item directory offset
@item comment bytes
@end itemize

The SimpleZip class representing a central-directory end is
@uref{https://256stuff.com/sources/simplezip/javadoc/simplezip/com/j256/simplezip/format/ZipCentralDirectoryEnd.html,
ZipCentralDirectoryEnd.java}.

@c ----------------------------------------------------------------
@node Writing, ZipFileOutput, Read Directory Entries, Using
@section Writing Zip Files

@cindex write Zip files

@menu
* ZipFileOutput ::             Constructing a ZipFileOutput.
* Write File Headers ::        Writing file header entries.
* Write File Data ::           Writing file data to buffer, file, or stream
* Write Directory Entries ::   Writing central-directory entries.
@end menu

@c ----------------------------------------------------------------
@node ZipFileOutput, Write File Headers, Writing, Writing
@subsection Constructing a ZipFileOutput

@cindex ZipFileOutput
@cindex write zip files

The main class that reads in Zip files is @code{ZipFileOutput}.  You can write Zip data to a @code{File},
file-path string, or stream it out via an @code{OutputStream}.

@example
// write to a file-path
ZipFileOutput zipOutput = new ZipFileOutput("/tmp/file.zip");
// write to a file
ZipFileOutput zipOutput =
    new ZipFileOutput(new File("/tmp/file.zip"));
// write to an OutputStream
ZipFileOutput zipOutput = new ZipFileOutput(outputStream);
@end example

@cindex file data, buffering
@cindex buffered file data
@cindex avoiding data descriptor
@cindex data descriptor, avoiding
@cindex no data descriptor

@anchor{File Buffering}

The Zip file data starts with a file-header which contains (among other things) the compressed-size and checksum
information that may not be known ahead of time.  For files that are being deflated, these fields can be left as 0 in
which case @code{ZipFileOutput} will write out a @code{ZipDataDescriptor} after the file data.

However, you can also turn on the buffering the file-data so we can calculate the compressed-size and crc checksum
information @emph{beforehand}, writing out a file-header with the size and checksum information filled in, 
removing the need for a @code{ZipDataDescriptor}.

@example
// turn on buffering
zipOutput.enableFileBuffering(1024 * 1024 /* maxSizeBuffered */,
    100 * 1024 /* maxSizeInMemory */);
@end example

See the @uref{https://256stuff.com/sources/simplezip/javadoc/simplezip/com/j256/simplezip/ZipFileOutput.html#enableFileBuffering-int-int-,
Javadocs for the enableFileBuffering(...) method} for more information.

@c ----------------------------------------------------------------
@node Write File Headers, Write File Data, ZipFileOutput, Writing
@subsection Writing File Header Entries

@cindex write zip file header
@cindex zip file header, writing

File headers immediately precede the file-data in a Zip.  You need to first create a @code{ZipFileHeader} using the
@code{ZipFileHeader.Builder} class.

@example
// build our header by setting fields with with...() and set...()
ZipFileHeader fileHeader = ZipFileHeader.builder()
	.withFileName("hello.txt")
	.withGeneralPurposeFlags(GeneralPurposeFlag.DEFLATING_MAXIMUM)
	.withLastModifiedDateTime(LocalDateTime.now())
	.build();
// write the header to the zip output
zipOutput.writeFileHeader(fileHeader);
@end example

Even though the method is @code{writeFileHeader(...)}, the code may not write anything to disk immediately depending
if buffering is enabled.  Immediately after the header as been written, you should start writing the file-data.

@c ----------------------------------------------------------------
@node Write File Data, Write Directory Entries, Write File Headers, Writing
@subsection Writing File Data to Buffer, File, or Stream

@cindex write zip file data
@cindex zip file data
@cindex read to File
@cindex read from InputStream

After writing the header you then write the file data.  You can read in bytes to be written to the Zip file data from
a file-path string, @code{File}, or stream it in via an @code{InputStream}.

@example
// write bytes from file in specified path to the zip output
zipOutput.writeFileData("file.txt");
// write bytes from file to the zip output 
zipOutput.writeFileData(new File("file.txt");
// stream bytes from an inputStream to the zip output 
zipOutput.writeFileData(inputStream);
@end example

You can also have @code{ZipFileOutput} write file data from a series of buffers.  You will need to call
@code{finishFileData()} after all of the data is written.

@example
// can also write at offset and length
zipOutput.writeFileDataPart(buffer);
zipOutput.writeFileDataPart(buffer);
// ... repeat until all bytes written
// after all bytes written you must call finish
zipOutput.finishFileData();
@end example

By default @code{ZipFileOutput} will take your bytes and write them to the Zip file encoded (i.e. deflate/comopress).
You can also write the @emph{raw} bytes without conversion using similar write methods with "raw" in the name.

@example
// write _raw_ file data from the file specified by output-path
zipInput.writeRawFileData("file.txt");
...
@end example

If you would like to stream the file-data into the Zip file, you can open up an @code{OutputStream} for the file-data
either in encoded or raw mode.  Calls to @code{write()} on the @code{OutputStream} turn around and call the write methods
on the @code{ZipFileOutput}.

@example
// writing to output stream calls thru to zipOutput.writeFileDataPart()
// or zipOutput.writeRawFileData() methods
OutputStream outputStream =
    zipOutput.openFileDataOutputStream(false /* not raw */);
@end example

@cindex write zip within zip
@cindex zip within zip, writing
Opening an output-stream allows you to write a Zip file from within another Zip file -- or a jar within a war, etc..

@cindex data descriptor

Once all of the data has been written for a particular file, the @code{ZipFileOutput} may automatically determine
that it needs to write a @code{ZipDataDescriptor} entry with the sizes and crc checksum information.

@c ----------------------------------------------------------------
@node Write Directory Entries, Maven, Write File Data, Writing
@subsection Writing Central-Directory Entries

@cindex central-directory entries, writing

By default the @code{ZipFileOutput} will record the @code{ZipFileHeader} entries that have been written to the Zip
output so they can be written out as the central-directory file-entries at the end of the Zip data.  While you are
writing each file, you have the option to associate more information with the file that will be written in each
file-entry.

@example
// add information to the file header that was just written that
// it is a text-file
zipOutput.addDirectoryFileInfo(
	ZipCentralDirectoryFileInfo.builder().withTextFile(true).build());
@end example

There are a number of other fields that can be written.  See the
@uref{https://256stuff.com/sources/simplezip/javadoc/simplezip/com/j256/simplezip/format/ZipCentralDirectoryFileInfo.html,
javadocs for the ZipCentralDirectoryFileInfo} for more information.

@cindex central-directory end, writing
@cindex zip data end, reading

At the very end of the Zip file the @code{ZipFileOutput} will automatically write the @code{ZipCentralDirectoryEnd}
information.  It will use fields from the @code{ZipCentralDirectoryFileInfo} as well to write out the fields.

@c ----------------------------------------------------------------
@node Maven, Zip File Format, Write Directory Entries, Using
@section Using With Maven

@cindex Maven, use with
@cindex pom.xml dependency
To use SimpleZip with maven, include the following dependency in your @file{pom.xml} file:

@example
<dependency>
    <groupId>com.j256.simplezip</groupId>
    <artifactId>simplezip</artifactId>
    <version>@value{simplezip_version}</version>
</dependency>
@end example 

@c ----------------------------------------------------------------
@node Zip File Format, Examples, Maven, Top
@chapter Various Parts of a Zip File

A Zip file is made up of the following pieces of information. 

@enumerate 1
@item file information (0 or multiple)
@enumerate a
@item file header, see @uref{https://256stuff.com/sources/simplezip/javadoc/simplezip/com/j256/simplezip/format/ZipFileHeader.html, ZipFileHeader.java}
@itemize
@item file-name
@item flags
@item compressed size
@item uncompressed size
@item checksum
@item ...
@end itemize

@item file data (encoded bytes)
@item optional data-descriptor, either in standard or Zip64 format, see @uref{https://256stuff.com/sources/simplezip/javadoc/simplezip/com/j256/simplezip/format/ZipDataDescriptor.html, ZipDataDescriptor.java}
@itemize
@item compressed size
@item uncompressed size
@item checksum
@end itemize
@end enumerate

@item central-directory file entries (0 or multiple), see @uref{https://256stuff.com/sources/simplezip/javadoc/simplezip/com/j256/simplezip/format/ZipCentralDirectoryFileEntry.html, ZipCentralDirectoryFileEntry.java}
@itemize
@item file-name
@item file offset
@item internal and external attributes
@item file comment
@item ...
@end itemize

@item optional Zip64 end, see @uref{https://256stuff.com/sources/simplezip/javadoc/simplezip/com/j256/simplezip/format/Zip64CentralDirectoryEnd.html, Zip64CentralDirectoryEnd.java}
@itemize
@item version made
@item version needed
@item ...
@item extensible data
@end itemize

@item optional Zip64 end locator, see @uref{https://256stuff.com/sources/simplezip/javadoc/simplezip/com/j256/simplezip/format/Zip64CentralDirectoryEndLocator.html, Zip64CentralDirectoryEndLocator.java}
@itemize
@item disk number
@item disk number start
@item end offset
@item number of disks
@end itemize

@item central-directory end (summary information), see @uref{https://256stuff.com/sources/simplezip/javadoc/simplezip/com/j256/simplezip/format/ZipCentralDirectoryEnd.html, ZipCentralDirectoryEnd.java}
@itemize
@item number records
@item central-directory offset
@item comment
@item ...
@end itemize

@end enumerate

@c ----------------------------------------------------------------
@node Examples, License, Maven, Top
@chapter Example Code

Here is some example code to help you get going with SimpleZip.  I often find that code is the best documentation of how
to get something working.  Please feel free to suggest additional example packages for inclusion here.  Source code submissions
are welcome as long as you don't get piqued if we don't chose your's.

@cindex examples of code
@cindex code examples

@itemize @bullet

@cindex simple zip output example
@anchor{simple zip output example}
@item SimpleZipOutput.java

This example writes out a Zip file with a file, a directory, and a file inside of that directory.
See the @uref{https://256stuff.com/sources/simplezip/docs/example-simple, source code}.

@cindex example, zip file copy
@cindex copy zip file, example
@anchor{zip file copy}
@item ZipFileCopy.java 

This example reads in a Zip file using ZipFileInput and writes it out with ZipFileOutput while hopefully not
changing any of the internal structures.  Please report a Zip that doesn't get copied perfectly with this.
See the @uref{https://256stuff.com/sources/simplezip/docs/example-copy, source code}.

@cindex zip file info example
@anchor{zip file info}
@item ZipFileCopy.java 

This example reads in a Zip file and spits out the details about the file in excruciating detail.
See the @uref{https://256stuff.com/sources/simplezip/docs/example-info, source code}.

@end itemize

@c ----------------------------------------------------------------
@node License, Index of Concepts, Examples, Top
@chapter Open Source License

@cindex license
@cindex open source license
This document is part of the SimpleZip project.

Copyright @value{simplezip_year}, Gray Watson

Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby
granted, provided that this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE.

@c ----------------------------------------------------------------
@node Index of Concepts,, License, Top
@unnumbered Index of Concepts

@printindex cp

@ifhtml
@contents
@end ifhtml

@bye
